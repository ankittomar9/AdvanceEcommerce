version: '3.8'

networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-network
    attachable: true

services:
  # Order Service MySQL
  order-mysql:
    image: mysql:8.3.0
    container_name: order-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: order_service
      MYSQL_USER: orderuser
      MYSQL_PASSWORD: orderpassword
    ports:
      - "3306:3306"
    volumes:
      - E:/docker-volumes/order-service/mysql:/var/lib/mysql
      - ./order-service/docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 30s
      retries: 10
      start_period: 30s
    command: [
      '--default-authentication-plugin=mysql_native_password',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--max_connections=200',
      '--wait_timeout=300',
      '--interactive_timeout=300'
    ]

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    restart: always
    depends_on:
      order-mysql:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://order-mysql:3306/order_service?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: orderuser
      SPRING_DATASOURCE_PASSWORD: orderpassword
      SPRING_JPA_HIBERNATE_DDL-AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_FLYWAY_ENABLED: "true"
      INVENTORY_SERVICE_URL: http://inventory-service:8082
    networks:
      - ecommerce-network

  # Inventory Service MySQL
  inventory-mysql:
    image: mysql:8.3.0
    container_name: inventory-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: inventory_service
      MYSQL_USER: inventoryuser
      MYSQL_PASSWORD: inventorypassword
    ports:
      - "3307:3306"
    volumes:
      - E:/docker-volumes/inventory-service/mysql:/var/lib/mysql
      - ./inventory-service/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 30s
      retries: 10
      start_period: 30s
    command: [
      '--default-authentication-plugin=mysql_native_password',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--max_connections=200',
      '--wait_timeout=300',
      '--interactive_timeout=300'
    ]

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    restart: always
    depends_on:
      inventory-mysql:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://inventory-mysql:3306/inventory_service?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: inventoryuser
      SPRING_DATASOURCE_PASSWORD: inventorypassword
      SPRING_JPA_HIBERNATE_DDL-AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_FLYWAY_ENABLED: "true"
    networks:
      - ecommerce-network

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    container_name: product-service
    ports:
      - "8000:8000"
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://root:password@mongodb:27017/product-service?authSource=admin&retryWrites=true&w=majority
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
    volumes:
      - ./product-service:/app
      - ~/.m2:/root/.m2
    working_dir: /app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB
  mongodb:
    image: mongo:7.0.5
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - mongodb_data:/data/db
    command: ["--auth", "--bind_ip_all"]
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "E:\\docker-data\\mongodb"