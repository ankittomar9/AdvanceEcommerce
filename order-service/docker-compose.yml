version: '4'

networks:
  ecommerce-network:
    name: ecommerce-network
    driver: bridge

services:
  mysql:
    image: mysql:8.3.0
    container_name: order-serviceDB
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: order_service
      MYSQL_USER: orderuser
      MYSQL_PASSWORD: orderpassword
    ports:
      - "3306:3306"
    volumes:
      - E:/docker-volumes/order-service/mysql:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 30s
      retries: 10
      start_period: 30s
    command: [
      '--default-authentication-plugin=mysql_native_password',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--max_connections=200',
      '--wait_timeout=300',
      '--interactive_timeout=300'
    ]

  order-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order-service
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_service?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: orderuser
      SPRING_DATASOURCE_PASSWORD: orderpassword
      SPRING_JPA_HIBERNATE_DDL-AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_FLYWAY_ENABLED: "true"
      INVENTORY_SERVICE_URL: http://inventory-service:8082
    networks:
      - ecommerce-network

#    # Kafka Services
#    zookeeper:
#      image: confluentinc/cp-zookeeper:7.5.0
#      hostname: zookeeper
#      container_name: zookeeper
#      ports:
#        - "2181:2181"
#      environment:
#        ZOOKEEPER_CLIENT_PORT: 2181
#        ZOOKEEPER_TICK_TIME: 2000
#      networks:
#        - ecommerce-network
#
#    broker:
#      image: confluentinc/cp-kafka:7.5.0
#      container_name: broker
#      ports:
#        - "9092:9092"
#        - "29092:29092"
#      depends_on:
#        - zookeeper
#      environment:
#        KAFKA_BROKER_ID: 1
#        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
#        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      networks:
#        - ecommerce-network
#
#    schema-registry:
#      image: confluentinc/cp-schema-registry:7.5.0
#      hostname: schema-registry
#      container_name: schema-registry
#      depends_on:
#        - broker
#      ports:
#        - "8085:8081"
#      environment:
#        SCHEMA_REGISTRY_HOST_NAME: schema-registry
#        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
#        SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
#      networks:
#        - ecommerce-network
#
#    kafka-ui:
#      container_name: kafka-ui
#      image: provectuslabs/kafka-ui:latest
#      ports:
#        - "8086:8080"
#      depends_on:
#        - broker
#        - schema-registry
#      environment:
#        KAFKA_CLUSTERS_0_NAME: local
#        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
#        #    KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
#        DYNAMIC_CONFIG_ENABLED: 'true'
#      networks:
#        - ecommerce-network
#
# volumes:
#    mongodb_data:
#      driver: local
#      driver_opts:
#        type: none
#        device: "E:\\docker-data\\mongodb"
#    kafka_data:
#    zookeeper_data: